---
- name: Set up Telegraf Influx Grafana (GIT)
  hosts: servers
  gather_facts: yes
  become_method: sudo
  remote_user: geo
  vars:
    ansible_python_interpreter: /usr/bin/python3
    repo_url: https://github.com/geo-kalo/containers.git
    repo_dest: /tmp/grafana  # Update this to your desired path
    docker_network: internal
    subnet: 192.168.199.0/24
    subnet_pref: 192.168.199.
  tasks:
    - name: Fixing socket permissions
      shell: chmod 777 /var/run/docker.sock
      become: yes 

    - name: Clone the Git repository
      git:
        repo: "{{ repo_url }}"
        dest: "{{ repo_dest }}"
        version: main
        clone: yes
        update: yes
        accept_hostkey: yes  # Optional, to auto-accept host key

    - name: Build myowncloud image
      docker_image:
        build:
                path: "{{ repo_dest }}/grafana-proiekt/owndockerfile"
        name: "myowncloud:latest"
        source: build
        tag: latest
        push: no

    - name: Build myinflux image
      docker_image:
        build: 
          path: "{{ repo_dest }}/grafana-proiekt/influxdockerfile"
        name: "myinflux:latest"
        source: build
        tag: latest
        push: no

    - name: Build mytelegraf image
      docker_image:
        build: 
          path: "{{ repo_dest }}/grafana-proiekt/telegrafdockerfile"
        name: "mytelegraf:latest"
        source: build
        tag: latest
        push: no

    - name: Build mygrafana image
      docker_image:
        build: 
          path: "{{ repo_dest }}/grafana-proiekt/grafanadockerfile"
          network: host 
        name: mygrafana
        source: build
        tag: latest
        push: no
        #buildargs:
        #  --network: host

    - name: Create  Docker Network
      docker_network:
        name: "{{ docker_network }}"
        state: present
        ipam_config:
          - subnet: "{{ subnet }}"

    - name: Create volumes
      docker_volume:
        name: "{{ item }}"
      loop:
        - data-owncloud
        - apps-owncloud
        - config-owncloud
        - connection_info
        - influxdb2-config
        - influxdb2-data

    - name: Run owncloud container
      docker_container:
        name: myowncloud
        state: started
        image: myowncloud
        networks:
          - name: "{{ docker_network }}"
            ipv4_address: "{{ subnet_pref }}10"
        volumes:
          - data-owncloud:/var/www/html/data
          - apps-owncloud:/var/www/html/apps
          - config-owncloud:/var/www/html/config
        ports:
          - "80:80"

    - name: Run myinfluxv2 container
      docker_container:
        name: myinfluxv2
        state: started
        image: myinflux
        networks:
          - name: "{{ docker_network }}"
            ipv4_address: "{{ subnet_pref }}11"
        volumes:
          - influxdb2-data:/var/lib/influxdb2
          - influxdb2-config:/etc/influxdb2
          - connection_info:/connection_info
        ports:
          - "8086:8086"

    - name: processing...
      wait_for:
        timeout: 30

    - name: Run grafana container
      docker_container:
        name: grafana
        state: started
        image: mygrafana
        networks:
          - name: "{{ docker_network }}"
            ipv4_address: "{{ subnet_pref }}12"
        volumes:
          - connection_info:/connection_info
        ports:
          - "3000:3000"

    - name: processing...
      wait_for:
        timeout: 15

    - name: Run mytelegraf container
      docker_container:
        name: mytelegraf
        state: started
        image: mytelegraf
        networks:
          - name: "{{ docker_network }}"
            ipv4_address: "{{ subnet_pref }}13"
        privileged: yes
        volumes:
          - /var/run/docker.sock:/var/run/docker.sock
          - connection_info:/connection_info
        ports:
          - "8125:8125"


    - name: Run guacd
      docker_container:
              name: guacd
              state: started
              image: guacamole/guacd
              networks:
                      - name: "{{ docker_network }}"
                        ipv4_address: "{{ subnet_pref }}14"

    - name: Create postgres-guacamole volume
      docker_volume:
              name: guacamole

    - name: Run postgres-guacamole
      docker_container:
              name: postgres-guacamole
              image: postgres
              state: started
              env:
                      POSTGRES_USER: geo
                      POSTGRES_PASSWORD: 666
                      POSTGRES_DB: guacamole_db
              volumes:
                      - guacamole:/var/lib/postgresql/data
              networks:
                      - name: "{{ docker_network }}"
                        ipv4_address: "{{ subnet_pref }}15"

     - name: create initb.sql
       shell: docker run --rm guacamole/guacamole /opt/guacamole/bin/initdb.sh --postgresql > /tmp/initdb.sql

     - name: Create database user
       shell: "{{ item }}"
       loop:
               - docker exec -it postgres-guacamole psql -U geo -d guacamole_db -c "CREATE USER geo WITH PASSWORD '666';"
               - docker exec -it postgres-guacamole psql -U geo -d guacamole_db -c "GRANT SELECT, INSERT, UPDATE, DELETE ON ALL TABLES IN SCHEMA public TO geo;"
               - docker exec -it postgres-guacamole psql -U geo -d guacamole_db -c "GRANT SELECT, USAGE ON ALL SEQUENCES IN SCHEMA public TO geo;"

     - name: Run the Guacamole container
       docker_container:
               name: guacamole
               image: guacamole/guacamole
               state: started
               restart_policy: always
               ports:
                       - "8080:8080"
               env:
                       GUACD_HOSTNAME: guacd
                       GUACD_PORT: 4822
                       POSTGRESQL_PASSWORD: "666"
                       POSTGRESQL_USER: geo
                       POSTGRESQL_DATABASE: guacamole_db
                       POSTGRESQL_HOSTNAME: postgres-guacamole
               networks:
                       - name:  "{{ docker_network }}"
                          ipv4_address: "{{ subnet_pref }}16"










