- name: Set firewall
  hosts: servers
  gather_facts: no
  remote_user: geo
  become_method: sudo
  vars:
    repo_url: https://github.com/geo-kalo/containers.git
    ansible_python_interpreter: /usr/bin/python3
    default_interface_ip: 10.0.48.56/24
    default_gw: 10.0.48.1
    parent_interface: "ens18"
    pub_net_subnet: 10.0.48.0/24
    pub_net_gateway: 10.0.48.1
    pub_net_ip: 10.0.48.113
    private_net_subnet: 192.168.199.0/24
    private_net_0: 192.168.199.0
    private_net_ip: 192.168.199.
    repo_dest: /home/geo/firewall
    working_dir_controller: /tmp/gg
    database_user: admin
    database_password: 666
    database_db: firewall
    systemd_units:
      - "firewall-network.service"
        #- "firewall.service"
      - "set-default-route.service"
        #- "webserver.service"
  tasks:

    - name: Store default network into the system files.
      lineinfile:
              state: present
              create: yes
              line: "{{ item }}"
              path: "{{ repo_dest }}/default_network"
      loop:
              - "{{ parent_interface }}"
              - "{{ default_interface_ip }}"
              - "{{ default_gw }}"


    - name: Clone Git repository to controller node
      git:
              repo:  "{{ repo_url }}"
              dest: "{{ working_dir_controller }}"
              version: main
              clone: yes 
              update: yes
              accept_hostkey: yes
      delegate_to: 127.0.0.1

    - name: Creating directories..
      file: 
        path: "{{ repo_dest }}"
        state: directory
        mode: '0755'
        owner: geo
        group: geo

    - name: Copy add-default-route script to host
      template:
              src: "{{ working_dir_controller }}/firewall/add-default-route.j2"
              dest:  "{{ repo_dest }}/add-default-route"
              mode: '0555'

    - name: Copy dockerfile(firewallfile)
      copy:
        src: "{{ working_dir_controller }}/firewall/firewallfile"
        dest: "{{ repo_dest }}/"
        mode: '0555'

    - name: Copy firewall's entrypoint
      template:
        src: "{{ working_dir_controller }}/firewall/entrypoint.sh.j2"
        dest: "{{ repo_dest }}/entrypoint.sh"
        mode: '777'

    - name: Copy firewall's initial setup
      template:
        src: "{{ working_dir_controller }}/firewall/iptables-rules.j2"
        dest: "{{ repo_dest }}/iptables-rules"
        mode: '0555'
    
    - name: Copy rest of the needed files..
      copy:
        src: "{{ working_dir_controller }}/firewall/resolv.conf"
        dest: "{{ repo_dest }}/"
        mode: '0555'
    
    - name: Copy prune images on reboot
      copy:
        src: "{{ working_dir_controller }}/firewall/prune_images"
        dest:  "{{ repo_dest }}/"
        mode: '0777'


    - name: Copy webserver files
      copy:
        src: "/tmp/gg/firewall/{{ item }}"
        dest: "{{ repo_dest }}/"
      loop:
        - activate_virtual_env.sh
        - main.py
        - packets
        - ports.conf
        - virtual-fastapi.conf
        - webserver-api
        - webserver-api-entrypoint.sh
    
    - name: Copy database files
      template:
        src: "{{ working_dir_controller }}/firewall/databasefile.j2"
        dest: "{{ repo_dest }}/"

    - name: Build firewall image
      docker_image:
        build:
          path: "{{ repo_dest }}"
          dockerfile: "firewallfile"
        name: "firewall:latest"
        source: build
        tag: latest
        push: no

    - name: Create webserver image
      docker_image:
        build:
          path: "{{ repo_dest }}"
          dockerfile: webserver-api
          network: host
        name: webserver
        source: build
        tag: latest
        push: no
              
    - name: Create database image
      docker_image:
        build:
          path: "{{ repo_dest }}"
          dockerfile: databasefile
          network: host 
        name: databasepsql
        source: build
        tag: latest
        push: no 

    - name: Create Docker pub_net network
      docker_network:
        name: pub_net
        driver: macvlan
        state: present
        ipam_config:
          - subnet: "{{ pub_net_subnet }}"
            gateway: "{{ pub_net_gateway }}"
        driver_options:
          parent: "{{ parent_interface }}"

    - name: Create Docker internal network
      docker_network:
        name: internal
        state: present
        ipam_config:
          - subnet: "{{ private_net_subnet }}"
    
    - name: Create database volume
      docker_volume:
        name: datavbase_volume

    - name: Create firewall volume
      docker_volume:
        name: firewall_volume          

    - name: Copy systemd units to host
      copy:
              #src: "{{ repo_dest }}/{{ item }}"
        src: "{{ working_dir_controller }}/firewall/{{ item }}"
        dest: /etc/systemd/system/
      loop: "{{ systemd_units }}"
      become: yes

    - name: Copy systemd units to host
      template:
        src: "{{ working_dir_controller }}/firewall/firewall.service.j2"
        dest: /etc/systemd/system/firewall.service
        mode: '777' 
      become: yes

    - name: Copy systemd units to host
      template:
        src: "{{ working_dir_controller }}/firewall/databasepsql.service.j2"
        dest: /etc/systemd/system/databasepsql.service
        mode: '7777'
      become: yes     

    - name: Copy systemd units to host
      template:
        src: "{{ working_dir_controller }}/firewall/webserver.service.j2"
        dest: /etc/systemd/system/webserver.service
        mode: '777'
      become: yes

    - name: Enable systemd units
      systemd:
        name: "{{ item }}"
        enabled: yes
      loop: "{{ systemd_units }}"
      become: yes

    - name: Enable systemd units
      systemd:
        name: "{{ item }}"
        enabled: yes
      loop:
        - "webserver.service"
        - "databasepsql.service" 
      become: yes

    - name: Copy systemd grafana unit to host
      copy:
        src: "{{ working_dir_controller }}/firewall/grafana.service"
        dest: /etc/systemd/system/
      become: yes
  
    - name: Enable systemd grafana unit
      systemd:
        name: grafana.service
        enabled: yes
      become: yes
      register: result
      until: result.failed == False 
      retries: 3
      delay: 5
      ignore_errors: yes

    - name: reload systemd's conf
      shell: systemctl daemon-reload
      when: result.failed
      become: yes

    - name: Create working dir for grafana
      file:
              path: /home/geo/grafana-proiekt
              state: directory
              owner: geo

    - name: Copy needed files for ansible grafana
      copy:
              src: "{{ working_dir_controller }}/firewall/prune-monitoring-files" 
              dest: /home/geo/grafana-proiekt/prune-monitoring-files      
              mode: '0777'

    - name: Copy needed files for ansible grafana
      copy:
              src: "{{ working_dir_controller }}/firewall/inventory_grafana"
              dest: /home/geo/grafana-proiekt/inventory
              
    - name: Copy needed files for ansible grafana
      copy:
              src: "{{ working_dir_controller }}/firewall/ansible.cfg"
              dest: /home/geo/grafana-proiekt/ansible.cfg

    - name: Copy needed files for ansible grafana
      copy:
              src: "{{ working_dir_controller }}/grafana-proiekt/set_git_fixed.yml"
              dest: /home/geo/grafana-proiekt/set_git_fixed.yml


    - name: Reboot configured systems
      reboot:
        msg: "Rebooting machine"  
      become: yes
